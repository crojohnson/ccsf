CS211s -- 10/13/16 

This week's topics: more Reflection and more Generics

If we need to access private constructors, vars, or methods use:
field.setAccessible(true)
constructor.setAccessible(true)
method.setAccessible(true)

Tip: Don't use negative words such as "impossible" in Silicon Valley!

Overriding a final method can only be done with hacking methods, not with
setAccessible(true)

Creating an object of a class without a constructor or factory method:
public class NoNew
{
    public void display()
    {
        System.out.println("Hello world");
    }
    
    public static NoNew myNew() throws Exception // InstantiationException, IllegalAccessException
    {
        Class c1 = Class.forName("noNew");
        NoNew n = (NoNew) c1.newInstance(); // create object
        return n;
    }
    
    public static void (String ... args)
    {
        NoNew nn = myNew();
        nn.display();
    }
}

**** Possible exam question ****
Make an instance of a Date object without using the constructor.


Here's how to invoke the newInstance() constructor with parameters:
newInstance method header: newInstance(Class ... obj)
for example:
newInstance(String.class)

If a constructor has the following parameters: (int x, String s, double d)
Use this call to newInstance(): con.newInstance(int.class, String.class, double.class)
"con" is an object of the constructor.


Topic: Generics

Subtyping: One type is a subtype of another if they are related by extends or implements.
Examples: Integer is a subtype of Number
Double is a subtype of Number
ArrayList<E> is a subtype of List<E>
Collection<E> is a subtype of Iterable<E>

If a collection implements Iterable, they implement the for : each style of loop.

Subtyping is transitive: if a is a subtype of b and b is a subtpye of c then a is a subtype of c.

List<E> is a subtype of Iterable<E>
so List<E> is a subtype of Collection<E>

If a is a subtype of b then b is a subtype of a.

**** Question on final exam ****
<E> is the same as <E extends Object> // <E> is a shorter version!

There is a principle in generics: the Get and Put principle
-Get principle: whenever you want to get something 
from your Collection/container, you need to use the extends keyword.
Ex: <E extends Number> // limits entries to subclasses of Number

-Put principle: whenever you need to add something to your Collection
or container class, you need to use the super keyword.  
Ex: <E super Number> 

Abbreviation: "GPP" -- this can come in handy for job interviews.

public static <T> void copy(List<? super T> dst, List<? extends T> scr)

This method copies a list to another.  The <T> specifies what type will be in the args.
If we were using two different data types, we'd write <T, Q> // doesn't matter what T and Q are.

public static <T> <T> copy(List<? super T> dst, List<? extends T> scr)

This version returns an object of type <T>
It's dangerous to just say <T> -- we need to restrict the types that our method can handle.
List<? super T>    // this accepts any data (i.e. the "?") of type or a subtype of T.  Put in this container.
List<? extends T>  // this accepts any data which is a subtype of T.  Get from this container.


