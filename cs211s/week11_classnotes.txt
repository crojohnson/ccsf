CS211s -- 10/27/16

This week's topics: Probe homework recap, new homework assignment, generics, collections


Using GetOpt on homework assignments, further explanation:

java Query -l           "list"
           -s filename  "save"
           -n name      "name"
           -a age       "age"
           -g M or F    "gender"
           -S 2000      "?"
           
GetOpt g = new GetOpt(argv, "ls:n:a:g:S:");


When deploying a program, customers want an icon to click!  
We'll discuss how to do this.

mkwrapper, use it with your programs so that you don't have to type "java DoIt -a -l"
Copy the method into your wrappers file and call the method when you run a program,
first thing in the main method:

public static void main(String[] args) 
{
    mkWrapper();
    //... rest of program
}

rm is a very dangerous command.  When deleting in Windows, filename is changed to begin with ?

Homework assignment #4: make a program to delete files and another to restore them: srm.java  "Safe remove"

http://stackoverflow.com/questions/2693740/how-to-use-mkdir-and-rmdir-commands-in-a-java-program

java srm x y z k

rm -i  prompts user for delete, rm will prompt, not our Java program.

srm will accept all options from the rm command because we're calling rm from inside of our 
Java program.  srm is a wrapper around the rm command--we'll save the files somewhere, 
compress them as JAR files, then delete the originals.  Name of the JAR: RecycleBin.jar

This program seems simple, but there are subtle technicalities to bear in mind, for example:
java srm good but "good" is already in the deleted JAR file.  Should we overwrite, add 
parenthesis and keep all the files, etc?  Any approach is acceptable as long as it works.

Another problem: 3 files named "good" in different folders.  Our program should take care of paths
when JARing the files.

Next part: restoring files from the recycle bin, program title is "rb".
java rb -d                 "empty recycle bin"
        -s                 "show contents of recycle bin"
        -r good bad nice   "restore files from recycle bin"
        
        //

A little help from the whiteboard:
/*

String x[] = system("jar f RecycleBin");

for (String str : x) /
{
    for (String k : args) {
        if (k.equals(args[0]);
    }
}

srm abcd xyz mlu

File f = new File(args[0]);

if (f.exists()) ...

*/

Set it up so you don't have to type java ... using mkwrapper.
JAR file doesn't need an MF file--suppress the creation of this MF with -0 when creating JAR:
jar -0cf etc   // 0 means no manifest file (actually it's capital M, -0 means don't compress -GG)

File in pub directory: DemoSystem.java to see how to communicate with the system.

Due in two weeks.


Topic: Comparator vs Comparable

We can use our Probe classs to find out which classes in rt.jar implement these, and which one is
more commonly implemented.

if ("John" > "David") // what is the criteria for comparison?
if (5 > 2) // natural comparison, no need to implement Comparable.

Comparable has one method to @Override:
public int compareTo(Object obj)
This simplicity is why many programmers in Java prefer to implement this interface.

On the other hand, Comparator has two methods to @Override:
public int compare(Object obj1, Object obj2)
public boolean equals(Object e)

Topic: Generic methods

Adding generic methods to a traditional class--generics don't necessarily need a generic class!

public class Demo
{
    public static void main(String[] args) 
    {
        Integer[] x = { 1,2,3,4,5 };
        String[] s = { "good", "bad", "nice" };
        Demo.<Integer>print(x);  // static method call
        Demo.<String>print(s);
        
        System.out.println(Demo.max("good", "bad"));
        
        //System.out.println(Demo.max("good", 15)); // compiler error
    }

            // or <E extends number>
    public static <E> void print(E[] list)  // the E should match--be careful!
    {
        for (E e : list) System.out.print(e + " ");
        System.out.println();
    }
    
    public static <E extends Comparable<E>> E max(E o1, E o2)
    {
        return O1.compareTo(O2) > 0 ? o1 : o2;
    }
}

public class DemoGenMeth
{
         // means T and V both extend T or same type
    static <T, V extends T> boolean isIn(T x, V[] y)
    {
        for (int i = 0; i < y.length; i++)
        {
            if (x.equals(y[i]) return true;
        }
        return false;
    }
    
    public static void main(String[] args) 
    {
        Interger nums[] = {1,2,3,4,5};
        if (isIn(2, nums) System.out.println("2 is in nums");
        
        String str[] = {"good", "bad", "nice", "ugly"};
        if (isIn("bad", str)) System.out.println("bad is in str");
        
        //if (isIn("nice", nums)) System.out.println("nice is in nums"); // compiler error
    }
}

We can't use a for-each loop in many cases because the generic 
classes aren't guaranteed to be implementing Iterable.  It's ok here.


Topic: Collections

First thing to do is learn about the Collections interfaces--we'll be instantiating them soon:
Collection (singular)
Dequeue extends Queue      // two-headed queue
List extends Collection
NavigableSet extends SortedSet
Queue extends Collection   // fifo
Set extends Collection     // set: uniques only
SortedSet extends Set

Collection methods:
boolean add(E obj)
boolean addAll(Collection<? extends E> c)
void clear()
boolean contains(Object obj)
boolean containsAll(Collection<?> c)  // parameter is subset of this
boolean equals(Object obj)
boolean isEmpty()
Iterator<E> iterator()  // factory method, creating an object of Iterator class
boolean remove(Object obj)
boolean removeAll(Collection<?> c)
boolean retainAll(Colection<?> c) // inverse of removeAll -- typical quiz question
int size()
Object[] toArray()
<T> T[] toArray(T[] array)


Next week, we'll write the rest of the Interfaces, then we'll talk about classes
that implement the interfaces.
